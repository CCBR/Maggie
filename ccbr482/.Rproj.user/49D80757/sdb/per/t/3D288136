{
    "contents" : "setwd(\"/Users/maggiec/Documents/Deblina\")\nsetwd(\"/Volumes/CCBR/CCRIFXCCR/ccbr482/RNASeq/bam/\")\nsetwd(\"/Users/maggiec/GitHub/Maggie/ccbr482\")\nload(\"data/Gencode_fc.RData\")\nload(\".RData\")\nload(\"data/Gencode_fc_downsamp.RData\")\ntargets <- readTargets()\n\nbiocLite(\"biomaRt\")\nlibrary(biomaRt)\n###Done \n\ngtf=\"/data/maggiec/RNASeq/Genomes/hg19/gencode.v19.annotation.gtf\"\nlibrary(Rsubread)\nlibrary(limma)\ntargets <- readTargets()\n\nfc <- featureCounts(files=targets$bam,isGTFAnnotationFile=TRUE,nthreads=32,\n            annot.ext=gtf,GTF.attrType=\"gene_name\",strandSpecific=2,isPairedEnd=TRUE)\n\nfc=fc_paired_r\nls()\nlibrary(edgeR)\noptions(digits=3)\n\nx <- DGEList(counts=fc$counts, genes=fc$annotation)\n\n#Look at number of genes detected at > 5 counts/sample\napply(fc$counts,2,function(x)length(x[x>5]))\n\nX24h_C1_ATCACG.bam  X24h_C2_ACTTGA.bam       X24h_C3_2.bam X24h_RA1_TTAGGC.bam \n15928               16132               16706               16694 \nX24h_RA2_GATCAG.bam      X24h_RA3_2.bam \n17087               17003 \n\n###Downsample:\napply(fc$counts,2,function(x)length(x[x>5]))\nX24h_C1_ATCACG.bam  X24h_C2_ACTTGA.2.bam       X24h_C3_2.2.bam \n15928                 15987                 16186 \nX24h_RA1_TTAGGC.2.bam X24h_RA2_GATCAG.2.bam      X24h_RA3_2.2.bam \n16303                 16499                 16246\n\n####\nfc1=mat=fc$counts\ntfc1=t(fc1)\nfilter <- apply(fc1, 1, function(x) length(x[x>5])>=1)\nfc1filt <- fc1[filter,]\ngenes <- rownames(fc1filt)\ndim(fc1filt)\n\n####Histogram: Look at distribution of data before quantile:\nlibrary(reshape)\ndf.m <- melt(as.data.frame(fc1))\njpeg(filename = \"disp_plot_raw.jpeg\", width = 480, height = 480, \n     units = \"px\", pointsize = 12,quality = 100)\n\nggplot(df.m) + geom_density(aes(x = value,\n                                colour = variable)) + labs(x = NULL) +\n  theme(legend.position='top') + scale_x_log10()\n\ndev.off()\n\n###Do Normalization: cpm is further normalized by quantile\n##v1 = scaled by lib.size then quantile norm\nx$counts[x$genes$GeneID==\"MYCN\",]\nx$counts[x$genes$GeneID==\"RARB\",]\n\nx <- DGEList(counts=fc$counts, genes=fc$annotation)\nisexpr <- rowSums(cpm(x)>1) >= 2\nhasannot <- rowSums(is.na(x$genes))==0\nx <- x[isexpr & hasannot,,keep.lib.sizes=FALSE]\ndim(x)\n[1] 14109     6\n\nx <- calcNormFactors(x)\ncelltype <- factor(targets$condition)\nReplicate <- factor(targets$replicate)\ndesign <- model.matrix(~Replicate+celltype)\ndesign\n\ntargets\nv <- voom(as.matrix(x),design,plot=TRUE,normalize=\"quantile\")\n\nplotMDS(v,top=50,labels=substring(celltype,1,1), \n      col=ifelse(celltype==\"C\",\"blue\",\"red\"),gene.selection=\"common\")\n\nv2 <- voom(as.matrix(x),design,lib.size =x$samples[,2],\n           normalize=\"none\")\n\nfit <- lmFit(v,design) \nfit <- eBayes(fit) \noptions(digits=3) \ntopTable(fit,coef=4,n=16,sort=\"p\")\nvolcanoplot(fit,coef=4)  \n\n#####Write out Results ############\n\nfinalres=topTable(fit,coef=4,sort=\"none\",n=Inf)\n\nFC = 2^(fit$coefficients[,4])\nFC = ifelse(FC<1,-1/FC,FC)\n\nfinalres = cbind(v$E,FC,finalres)\n\nfinalres[rownames(finalres)==\"RARB\",] \nfinalres[rownames(finalres)==\"MYCN\",] \n\n\ndatadir=\"/Volumes/maggiec/Projects/ccbr482/Results\"\nsetwd(datadir)\nwrite.table(finalres2,file=\"Gencode_FCpval_new_paired.txt\",\n      row.names=TRUE,col.names=TRUE,sep=\"\\t\",quote=FALSE)\n\n\nwrite.table(finalres2,file=\"Gencode_FCpval_new_paired_downsamp.txt\",\n            row.names=TRUE,col.names=TRUE,sep=\"\\t\",quote=FALSE)\n\n#####Look after quantile normalization:\n\nhead(v1$weights)\ndf.n <- melt(as.data.frame(v$E))\ndf.n <- melt(as.data.frame(v2$E))  #look at non-normalized\n\njpeg(filename = \"disp_plot_nonnorm.jpeg\", width = 480, height = 480, \n     units = \"px\", pointsize = 12,quality = 100)\njpeg(filename = \"disp_plot_norm.jpeg\", width = 480, height = 480, \n     units = \"px\", pointsize = 12,quality = 100)\nggplot(df.n) + geom_density(aes(x = value,\n                                colour = variable)) + labs(x = NULL) +\n  theme(legend.position='top')\ndev.off()\n\ndatadir=\"/Volumes/maggiec/Projects/ccbr482/Results\"\nsetwd(datadir)\nwrite.table(v1$E,file=\"Gencode_voom_Q_Ctrl.txt\",\n            row.names=TRUE,col.names=TRUE,sep=\"\\t\",quote=FALSE)\nwrite.table(v1$E,file=\"Gencode_voom_none.txt\",\n            row.names=TRUE,col.names=TRUE,sep=\"\\t\",quote=FALSE)\n\n########################################################\ncolnames(v1Efilt)=colnames(v1$E)\njpeg(filename=\"MA_plot.jpeg\")\npar(mfrow=c(2,3))\nl = dim(v1Efilt)[2]-1\nfor (i in 1:l) {\n  j = i+1\n  MA = cbind(v1Efilt[,i],v1Efilt[,j])\n  colnames(MA) = c(colnames(v1Efilt[,i]),colnames(v1Efilt[,j]))\n  plotMA(MA,main=colnames(MA))\n  abline(h=0,col=\"red\")\n}\ndev.off()\n\ntfc1=t(fc1)\n\n\n#####Tried scaling first by total library counts - offset doesn't work as well)\nlmfitcoeff=vector()\nscale=matrix(nrow=dim(v1$E)[1],ncol=dim(v1$E)[2])\nscaleoff=matrix(nrow=dim(v1$E)[1],ncol=dim(v1$E)[2])\nfor (i in 1:12){\n  x=log2(fc1filt[,i]/v1$targets[i,1])\n  y=(v1$E[,i])\n  ylim=y[is.infinite(x)==FALSE]\n  xlim=x[is.infinite(x)==FALSE]\n  #plot(xlim,ylim)\n  \n  lmfit=lm(ylim~xlim)\n  abline(lmfit,col=\"red\")\n  lmfitcoeff[i]=lmfit$coefficients[1]\n  scaleoff[,i]=2^(y-lmfitcoeff[i])/2^x\n  scale[,i]=2^y/2^x\n}\n\nscaled_dat=(fc1filt)*(scaleoff)\nscaleval=(2^v1$E)*100  # Real data (aiming for)\nactscale=(fc1filt/scaleval)\n\nscale_fit=(fc1filt/actscale) ###Need to use this formula to calculate normalized counts\nsf = v1$E/log2((fc1filt/colSums(fc1filt))*1000000)\nscale_fit2=(fc1filt/sf)\n\nscaled_dat[rownames(scaled_dat)==\"Zbtb7b\"]\nscaleval[rownames(scaleval)==\"Zbtb7b\"]\nscale_fit[rownames(scale_fit)==\"Zbtb7b\"]\nscale_fit2[rownames(scale_fit2)==\"Zbtb7b\"]\nfc1filt[rownames(sumfcfilt)==\"Zbtb7b\"]\n\nplot(scaleval[,1],scale_fit2[,1])  # Closer to scaleval\nplot(scaleval[,1],scale_fit[,1])\n\ndf.m <- melt(as.data.frame(sf))  # look at original sf calculated using sumfcfilt counts \ndf.m <- melt(as.data.frame(actscale))  # look at actual scaling factor\nggplot(df.m) +  xlim(0,2) + geom_density(aes(x = value,\n                                             colour = variable)) \nboxplot(value~variable,data=df.m)\n\n#### Use scale factor (actscale to check if Quantile Normalized)\n\ndf.m <- melt(as.data.frame(scale_fit)) \nggplot(df.m) + geom_density(aes(x = value,\n                                colour = variable)) + labs(x = NULL) +\n  theme(legend.position='top') + scale_x_log10()\nboxplot(value~variable,data=df.m)\n\nwrite.table(actscale,file=\"scaling_factors.txt\",\n            row.names=TRUE,col.names=NA,sep=\"\\t\",quote=FALSE)\n\n\ntargets$replicate=c(1,2,3,1,2,3)\nGroup = as.factor(targets$condition)\nReplicate = as.factor(targets$replicate)\n#design=model.matrix(~0+Group)\ndesign=model.matrix(~Replicate+Group)\ncolnames(design)\nv=v1\nv=v2\n\nfit <- lmFit(v,design) \nfit <- eBayes(fit) \n\n\nplot(fit,coef=2, main=\"RA vs C\", legend=\"bottomright\") \n\nabline(h=0,col=\"darkgrey\") \n\n\ngtf_annot=read.delim(\"data/gencode.v19.annotation.gtf\",  skip=5,header=FALSE)\n#gtf_annot=read.delim(\"data/gencode.trunc\", skip=5,header=FALSE)\n\ngene_annot=as.character(gtf_annot$V9)\ngene_list=strsplit(gene_annot, split=\";\")\ngene_list2=sapply(gene_list,function(x) x[5:3])\ngenelist3=substr(gene_list2, 12, nchar(gene_list2))\n#t(genelist3)\ngene.df=as.data.frame(t(genelist3))\ngene.df$type=substr(gene.df$V2,3,10)\n\ngene.df=gene.df[c(1,3:4)]\ngene.df=gene.df[!duplicated(gene.df[,1]),]\ncolnames(gene.df)=c(\"gene\",\"type\",\"status\")\n\nfinalres$ID=rownames(finalres)\nfinalres2 = merge(finalres,gene.df,by.x=\"ID\",by.y=\"gene\")\n\nfinalres2[finalres2$ID==\"RARB\",]\n\n####For GO Analysis#########\n\nFCresults = cbind(finalres$ID,finalres$FC,finalres$P.Value)\ncolnames(FCresults)=c(\"ID\",\"FC\",\"pval\")\n\nwrite.table(FCresults,file=\"MYCN-RA-DS_results.txt\",quote=FALSE,row.names=FALSE,sep=\"\\t\")\nwrite.table(finalres$ID,file=\"RNASeq.chip\",quote=FALSE,row.names=FALSE,col.names=FALSE)\n\n\n\n\n############  Trials\n\n\ngene_matrix = data.frame()\n\nfor (i in 1:length(gene_list)){\n  gene_name=strsplit(gene_list[[i]][5],split=\" \")\n  gene_type=strsplit(gene_list[[i]][3],split=\" \")\n  gene_matrix[i,1] = gene_name[[1]][3]\n  gene_matrix[i,2] = gene_type[[1]][3]\n}\nlength(gene_list)\nlapply(1:length(gene_list))\ngene_name=strsplit(gene_list[[i]][5],split=\" \")\ngene_type=strsplit(gene_list[[i]][3],split=\" \")\ngene_matrix[i,1] = gene_name[[1]][3]\ngene_matrix[i,2] = gene_type[[1]][3]\n}\n\n\n\ngene_name=strsplit(gene_list[[i]][5],split=\" \")[[1]][3]\ngene_type=strsplit(gene_list[[i]][3],split=\" \")[[1]][3]\n\nmake_annot <- function(gene, type){\n  paste(strsplit(gene,split=\" \")[[1]][3],strsplit(type,split=\" \")[[1]][3],sep=\":\")\n}  \nlapply(genelist,)\n\n\ngene_df = data.frame(matrix(ncol = 3, nrow = 100))\ncolnames(gene_df)=c(\"gene_name\",\"gene_status\",\"gene_type\")\nlapply(gene_list,function(i) unlist(i)) \n\ngene_name=strsplit(gene_list[[i]][5],split=\" \")\ngene_df[i,]=as.data.frame.list(gene_list[[i]][5:3]))\ngene_df =cbind(gene_df,g1))\n}\n\ngene_matrix=unique(gene_matrix)",
    "created" : 1440360603691.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3743357384",
    "id" : "3D288136",
    "lastKnownWriteTime" : 1440353088,
    "path" : "~/GitHub/Maggie/ccbr482/RNASeq_Analysis_482.R",
    "project_path" : "RNASeq_Analysis_482.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}