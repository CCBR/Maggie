finalres=topTable(fit,sort="none",n=Inf)
edf=as.matrix(v$E[,1:8])
tedf= t(edf)
pca=prcomp(tedf,scale.=T)
tedf1 = data.frame(tedf)
Phenotype=targets$Phenotype[1:8]
Replicate=targets$Replicate[1:8]
tedf1$group = as.factor(Phenotype)
plot(pca,type="lines")  #Decide how many PC's are relevant for plotting
pca$x[,1:3]  #look at first 3 PC's
plot3d(pca$x[,1:3],col = as.integer(tedf1$group),type="s",size=2)
group.v<-as.vector(paste(Phenotype,Batch))
group.v<-as.vector(paste(Phenotype,Replicate))
text3d(pca$x, pca$y, pca$z, group.v, cex=1.0, adj = 1.2)
targets[9:16,]
celltype <- factor(targets$Phenotype[9:16])
targets[9:16,]
celltype <- factor(targets$Phenotype[9:16])
Replicate <- factor(targets$Replicate[9:16])
cell_rep=paste(celltype,Replicate,sep=".")
design2 <- model.matrix(~0+celltype)
design2
v2 <- voom(x[,9:16],design2,plot=TRUE,normalize="quantile")
edf=as.matrix(v$E[,9:16])
tedf= t(edf)
pca=prcomp(tedf,scale.=T)
tedf1 = data.frame(tedf)
Phenotype=targets$Phenotype
tedf1$group = as.factor(Phenotype)
plot(pca,type="lines")  #Decide how many PC's are relevant for plotting
Phenotype=targets$Phenotype[9:16]
tedf1$group = as.factor(Phenotype)
plot(pca,type="lines")  #Decide how many PC's are relevant for plotting
pca$x[,1:3]  #look at first 3 PC's
plot3d(pca$x[,1:3],col = as.integer(tedf1$group),type="s",size=2)
group.v<-as.vector(Phenotype)
text3d(pca$x, pca$y, pca$z, group.v, cex=1.0, adj = 1.2)
plot3d(pca$x[,1:3],col = as.integer(tedf1$group),type="s",size=2)
group.v<-as.vector(paste(Phenotype,Replicate))
text3d(pca$x, pca$y, pca$z, group.v, cex=1.0, adj = 1.2)
corfit <- duplicateCorrelation(v1),design1,block=as.factor(targets$Replicate[1:8]))
corfit <- duplicateCorrelation(v1,design1,block=as.factor(targets$Replicate[1:8]))
dim(x)
x <- calcNormFactors(x)
v1
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
corfit <- duplicateCorrelation(v1,design1,block=as.factor(targets$Replicate[1:8]))
v1
fit <- lmFit(v1,design1,block=as.factor(targets$Replicate[1:8]),
correlation=corfit$consensus)
corfit$consensus
fit <- eBayes(fit)
fit
topTable(fit, coef="celltypeAPC_Ps")
finalres=topTable(fit,sort="none",n=Inf)
corfit <- duplicateCorrelation(v1,design1,block=as.factor(targets$Replicate[1:8]))
fit1 <- lmFit(v1,design1,block=as.factor(targets$Replicate[1:8]),
correlation=corfit$consensus)
fit1 <- eBayes(fit1)
topgenes1=topTable(fit1, coef="celltypeAPC_Ps",n=50,sort.by="p")
fit1 <- lmFit(v1,design1,block=as.factor(targets$Replicate[1:8]),
correlation=corfit$consensus)
fit1 <- eBayes(fit1)
topgenes1=topTable(fit1, coef="celltypeAPC_Ps",n=50,sort.by="p")
FC = 2^(fit1$coefficients[,2])
FC = ifelse(FC<1,-1/FC,FC)
finalres=topTable(fit1,coef="celltypeAPC_Ps",sort="none",n=Inf)
fit1
volcano_data=as.data.frame(cbind(fit1$coefficients[,2],-1*log10(fit1$p.value[,2])))
volcano_data$pop.html.tooltip=rownames(volcano_data)
op <- options(gvis.plot.tag='chart')
library(googleVis)
Scatter <- gvisScatterChart(volcano_data,
options=list(
tooltip="{isHtml:'True'}",
legend='none',
lineWidth=0, pointSize=1,
title='APC Ps vs CB', vAxis="{title:'Log Odds'}",
hAxis="{title:'Log Fold Change'}",
width=1200, height=800,
hAxes="[{viewWindowMode:'explicit', viewWindow:{min:-10, max:10}}]",
vAxes="[{viewWindowMode:'explicit', viewWindow:{min:0, max:12}}]"))
plot(Scatter)
yval=ceiling(max(fit1$coefficients[,2]))
Scatter <- gvisScatterChart(volcano_data,
options=list(
tooltip="{isHtml:'True'}",
legend='none',
lineWidth=0, pointSize=1,
title='APC Ps vs CB', vAxis="{title:'Log Odds'}",
hAxis="{title:'Log Fold Change'}",
width=1200, height=800,
hAxes="[{viewWindowMode:'explicit', viewWindow:{min:-10, max:10}}]",
vAxes="[{viewWindowMode:'explicit', viewWindow:{min:0, max:12}}]"))
plot(Scatter)
fit1$coefficients[,2]
head(fit1$coefficients[,2])
fit1
ceiling(max(fit1$coefficients[,2]))
ceiling(max(-1*log10(fit1$p.value[,2]))
)
yval=ceiling(max(-1*log10(fit1$p.value[,2])))
Scatter <- gvisScatterChart(volcano_data,
options=list(
tooltip="{isHtml:'True'}",
legend='none',
lineWidth=0, pointSize=1,
title='APC Ps vs CB', vAxis="{title:'Log Odds'}",
hAxis="{title:'Log Fold Change'}",
width=1200, height=800,
hAxes="[{viewWindowMode:'explicit', viewWindow:{min:-10, max:10}}]",
vAxes="[{viewWindowMode:'explicit', viewWindow:{min:0, max:31}}]"))
plot(Scatter)
design1 <- model.matrix(~0+celltype)
design1
x
x[,1:8]
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
corfit <- duplicateCorrelation(v1,design1,block=as.factor(targets$Replicate[1:8]))
fit1 <- lmFit(v1,design1,block=as.factor(targets$Replicate[1:8]),
correlation=corfit$consensus)
fit1 <- eBayes(fit1)
topgenes1=topTable(fit1, coef="celltypeAPC_Ps",n=50,sort.by="p")
fit1
celltype <- factor(targets$Phenotype[1:8])
Replicate <- factor(targets$Replicate[1:8])
cell_rep=paste(celltype,Replicate,sep=".")
design1 <- model.matrix(~0+celltype)
design1
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
options(digits=3)
corfit <- duplicateCorrelation(v1,design1,block=as.factor(targets$Replicate[1:8]))
fit1 <- lmFit(v1,design1,block=as.factor(targets$Replicate[1:8]),
correlation=corfit$consensus)
fit1 <- eBayes(fit1)
topgenes1=topTable(fit1, coef="celltypeAPC_Ps",n=50,sort.by="p")
FC = 2^(fit1$coefficients[,2])
FC = ifelse(FC<1,-1/FC,FC)
finalres=topTable(fit1,coef="celltypeAPC_Ps",sort="none",n=Inf)
op <- options(gvis.plot.tag='chart')
volcano_data=as.data.frame(cbind(fit1$coefficients[,2],-1*log10(fit1$p.value[,2])))
volcano_data$pop.html.tooltip=rownames(volcano_data)
yval=ceiling(max(-1*log10(fit1$p.value[,2])))
Scatter <- gvisScatterChart(volcano_data,
options=list(
tooltip="{isHtml:'True'}",
legend='none',
lineWidth=0, pointSize=1,
title='APC Ps vs CB', vAxis="{title:'Log Odds'}",
hAxis="{title:'Log Fold Change'}",
width=1200, height=800,
hAxes="[{viewWindowMode:'explicit', viewWindow:{min:-10, max:10}}]",
vAxes="[{viewWindowMode:'explicit', viewWindow:{min:0, max:31}}]"))
plot(Scatter)
suppressPackageStartupMessages(library(googleVis))
library(googleVis)
op <- options(gvis.plot.tag='chart')
volcano_data=as.data.frame(cbind(fit1$coefficients[,2],-1*log10(fit1$p.value[,2])))
volcano_data$pop.html.tooltip=rownames(volcano_data)
yval=ceiling(max(-1*log10(fit1$p.value[,2])))
Scatter <- gvisScatterChart(volcano_data,
options=list(
tooltip="{isHtml:'True'}",
legend='none',
lineWidth=0, pointSize=1,
title='APC Ps vs CB', vAxis="{title:'Log Odds'}",
hAxis="{title:'Log Fold Change'}",
width=1200, height=800,
hAxes="[{viewWindowMode:'explicit', viewWindow:{min:-10, max:10}}]",
vAxes="[{viewWindowMode:'explicit', viewWindow:{min:0, max:31}}]"))
plot(Scatter)
plot(Scatter)
knit_hooks$set(rgl = function(before, options, envir) {
if (!before) {
## after a chunk has been evaluated
if (rgl.cur() == 0) return()  # no active device
name = paste(options$fig.path, options$label, sep = '')
rgl.snapshot(paste(name, '.png', sep = ''), fmt = 'png')
return(paste('\\includegraphics{', name, '}\n', sep = ''))
}
})
knit_hooks$set(webgl = hook_webgl)
plot(Scatter)
Scatter
```{r results='asis', tidy=FALSE,echo=TRUE}
suppressPackageStartupMessages(library(googleVis))
library(googleVis)
op <- options(gvis.plot.tag='chart')
volcano_data=as.data.frame(cbind(fit1$coefficients[,2],-1*log10(fit1$p.value[,2])))
volcano_data$pop.html.tooltip=rownames(volcano_data)
yval=ceiling(max(-1*log10(fit1$p.value[,2])))
Scatter <- gvisScatterChart(volcano_data,
options=list(
tooltip="{isHtml:'True'}",
legend='none',
lineWidth=0, pointSize=1,
title='APC Ps vs CB', vAxis="{title:'Log Odds'}",
hAxis="{title:'Log Fold Change'}",
width=1200, height=800,
hAxes="[{viewWindowMode:'explicit', viewWindow:{min:-10, max:10}}]",
vAxes="[{viewWindowMode:'explicit', viewWindow:{min:0, max:31}}]"))
plot(Scatter)
```
fit1$coefficients[,2]
-1*log10(fit1$p.value[,2])
yval=ceiling(max(-1*log10(fit1$p.value[,2])))
yval
volcano_data
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
v1
x[,1:8]
v1
head(v1$E)
x
head(x$counts)
head(x$counts)[,1:8]
cbind(head(v1$E,head(x$counts)[,1:8])
)
cbind(head(v1$E),head(x$counts)[,1:8])
plot(cbind(head(v1$E),head(x$counts)[,1:8]))
plot(v1$E[1],x$counts[,1])
x$counts[,1]
dim(x$counts[,1])
length(x$counts[,1])
length(v1$E[,1])
plot(v1$E[,1],x$counts[,1])
plot(x$counts[,1],v1$E[,1])
plot(x$counts[,1],2^v1$E[,1])
plot(x$counts[,2],2^v1$E[,2])
plot(x$counts[,3],2^v1$E[,3])
plot(x$counts[,4],2^v1$E[,4])
plot(x$counts[,5],2^v1$E[,5])
plot(x$counts[,6],2^v1$E[,6])
plot(x$counts[,7],2^v1$E[,7])
plot(x$counts[,8],2^v1$E[,8])
celltype
colnames(design1) <- levels(celltype)
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
corfit <- duplicateCorrelation(v1,design1,block=targets$Replicate[1:8])
corfit$consensus
fit1 <- lmFit(v1,design1,block=targets$Replicate[1:8],
correlation=corfit$consensus)
fit1 <- eBayes(fit1)
topgenes1=topTable(fit1, coef="celltypeAPC_Ps",n=50,sort.by="p")
corfit <- duplicateCorrelation(v1,design1,block=targets$Replicate[1:8])
corfit$consensus
corfit1 <- duplicateCorrelation(v1,design1,block=targets$Replicate[1:8])
fit1 <- eBayes(fit1)
topTable(fit1, coef="celltypeAPC_Ps",n=50,sort.by="p")
fit1
topgenes1=topTable(fit1, coef="APC_Ps",n=50,sort.by="p")
FC = 2^(fit1$coefficients[,2])
FC = ifelse(FC<1,-1/FC,FC)
finalres=topTable(fit1,coef="APC_Ps",sort="none",n=Inf)
op <- options(gvis.plot.tag='chart')
volcano_data=as.data.frame(cbind(fit1$coefficients[,2],-1*log10(fit1$p.value[,2])))
volcano_data$pop.html.tooltip=rownames(volcano_data)
yval=ceiling(max(-1*log10(fit1$p.value[,2])))
Scatter <- gvisScatterChart(volcano_data,
options=list(
tooltip="{isHtml:'True'}",
legend='none',
lineWidth=0, pointSize=1,
title='APC Ps vs CB', vAxis="{title:'Log Odds'}",
hAxis="{title:'Log Fold Change'}",
width=1200, height=800,
hAxes="[{viewWindowMode:'explicit', viewWindow:{min:-10, max:10}}]",
vAxes="[{viewWindowMode:'explicit', viewWindow:{min:0, max:31}}]"))
plot(Scatter)
fit1$design
head(fit1$coefficients)
volcanoplot(fit1,coef=2)
design1
design1 <- model.matrix(~Replicate+celltype)
design1
colnames(design1) <- levels(celltype)
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
colnames(design1) <- levels(celltype)
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
colnames(design1)
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
fit1 <- lmFit(v1,design1)
fit1 <- eBayes(fit1)
topgenes1=topTable(fit1, coef="APC_Ps",n=50,sort.by="p")
topgenes1=topTable(fit1, coef="celltypeAPC_Ps",n=50,sort.by="p")
volcanoplot(fit1,coef=5)
design1 <- model.matrix(~celltype)
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
design1
corfit1 <- duplicateCorrelation(v1,design1,block=targets$Replicate[1:8])
corfit1$consensus
fit1 <- lmFit(v1,design1,block=targets$Replicate[1:8],
correlation=corfit1$consensus)
fit1 <- lmFit(v1,design1)
fit1 <- eBayes(fit1)
volcanoplot(fit1,coef=2)
fit1 <- lmFit(v1,design1)
fit1 <- eBayes(fit1)
volcanoplot(fit1,coef=2)
fit1
volcanoplot(fit1,coef="celltypeAPC_Ps")
design1
design1 <- model.matrix(~0+celltype)
design1
design1 <- model.matrix(~0+celltype)
design1
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
design1
fit1 <- lmFit(v1,design1)
fit1 <- eBayes(fit1)
volcanoplot(fit1,coef="celltypeAPC_Ps")
design1 <- model.matrix(~celltype)
design1
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
design1
fit1 <- lmFit(v1,design1)
fit1 <- eBayes(fit1)
volcanoplot(fit1,coef="celltypeAPC_Ps")
design1 <- model.matrix(~0+celltype)
design1
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
fit1 <- lmFit(v1,design1)
fit1 <- eBayes(fit1)
volcanoplot(fit1,coef="celltypeAPC_Ps")
design1 <- model.matrix(~Replicate+celltype)
v1 <- voom(x[,1:8],design1,plot=TRUE,normalize="quantile")
fit1 <- lmFit(v1,design1)
fit1 <- eBayes(fit1)
volcanoplot(fit1,coef="celltypeAPC_Ps")
targets
celltype <- factor(targets$Phenotype)
Replicate <- factor(targets$Replicate)
cell_rep=paste(celltype,Replicate,sep=".")
design <- model.matrix(~0+celltype)
design
v <- voom(x,design,plot=TRUE,normalize="quantile")
options(digits=3)
design
fit <- lmFit(v,design)
fit <- eBayes(fit)
volcanoplot(fit,coef="celltypeAPC_Ps")
design <- model.matrix(~celltype)
design
v <- voom(x,design,plot=TRUE,normalize="quantile")
design
fit <- lmFit(v,design)
fit <- eBayes(fit)
volcanoplot(fit,coef="celltypeAPC_Ps")
design <- model.matrix(~0+celltype)
v <- voom(x,design,plot=TRUE,normalize="quantile")
fit <- lmFit(v,design)
fit
colnames(design)
colnames(design)=levels(Phenotype)
colnames(design)
levels(Phenotype)
Phenotype
celltyep
celltype
levels(celltype)
colnames(design)=levels(celltype)
colnames(design)
fit <- lmFit(v,design)
fit
targets
Cell <- factpr(targets$Cell)
Cell <- factor(targets$Cell)
Compartment <- factor(targets$Compartment)
model.matrix(~Cell*Compartment)
design <- model.matrix(~0+celltype)
design
dev.off()
v <- voom(x,design,plot=TRUE,normalize="quantile")
colnames(design)=levels(celltype)
colnames(design)=levels(celltype)
fit <- lmFit(v,design)
cm <- makeContrasts(Con_PsvsCB=Con_Ps-Con_CB, APC_Ps-CB=APC_Ps-APC_CB,
Diff=(APC_Ps-APC_CB)-(Con_Ps-Con_CB), levels=design)
cm <- makeContrasts(Con_PsvsCB=Con_Ps-Con_CB, APC_PsvsCB=APC_Ps-APC_CB,
Diff=(APC_Ps-APC_CB)-(Con_Ps-Con_CB), levels=design)
fit2 <- contrasts.fit(fit, cm)
fit2 <- eBayes(fit2)
volcanoplot(fit2,coef="Diff")
v <- voom(x,design,plot=TRUE)
design
colnames(design)=levels(celltype)
fit <- lmFit(v,design)
cm <- makeContrasts(Con_PsvsCB=Con_Ps-Con_CB, APC_PsvsCB=APC_Ps-APC_CB,
Diff=(APC_Ps-APC_CB)-(Con_Ps-Con_CB), levels=design)
fit2 <- contrasts.fit(fit, cm)
fit2 <- eBayes(fit2)
topTable(fit2, coef="celltypeAPC_Ps",n=50,sort.by="p")
topTable(fit2, coef="Diff",n=50,sort.by="p")
volcanoplot(fit2,coef="Diff")
design
targets
volcanoplot(fit2,coef="Con_PsvsCB")
volcanoplot(fit2,coef="APC_Ps-APC_CB")
volcanoplot(fit2,coef="APC_PsvsCB")
topTable(fit2, coef="Diff",n=50,sort.by="p")
topgenes=topTable(fit2, coef="Diff",n=50,sort.by="p")
FC = 2^(fit1$coefficients[,2])
FC = ifelse(FC<1,-1/FC,FC)
finalres=topTable(fit2,coef="Diff",sort="none",n=Inf)
head(FC)
FC = 2^(fit2$coefficients)
FC = ifelse(FC<1,-1/FC,FC)
FC
head(FC)
head(v$E)
head(finalres)
fit2
dim(finalres)
finalres=cbind(v$E,FC,finalres)
head(finalres)
pval=fit2$p.values
fit2
pval=fit2$p.value
finalres=topTable(fit2,coef="Diff",sort="none",n=Inf)
head(finalres)
finalres=cbind(v$E,FC,pval,finalres)
head(finalres)
colnames(pval)=paste(colnames(Fit2$pval),"pval",sep="_")
colnames(pval)=paste(colnames(fit2$pval),"pval",sep="_")
colnames(fit2$pval)
names(fit2$pval)
fit2$pval
colnames(pval)=paste(colnames(fit2$p.value),"pval",sep="_")
colnames(pval)
colnames(FC)=paste(colnames(fit2$coefficients),"FC",sep="_")
pval=fit2$p.value
colnames(pval)=paste(colnames(fit2$p.value),"pval",sep="_")
finalres=topTable(fit2,coef="Diff",sort="none",n=Inf)
head(finalres)
finalres=cbind(v$E,FC,pval,finalres)
head(finalres)
write.table(finalres,file="RNASeq_results.txt",sep="\t")
colnames(v$E)=paste(fc1filtnames,targets$Replicate)
df.m <- melt(as.data.frame(v$E))
ggplot(df.m) +
geom_density(aes(x = value, colour = variable)) + labs(x = NULL) +
theme(legend.position='right') + ggtitle("Normalized Counts")
par(mar=c(10,7,1,1))
boxplot(value~variable,las=2,data=df.m,main="Normalized Signal",
ylab="Counts",col=as.numeric(as.factor(targets$Phenotype)))
v <- voom(x,design,plot=TRUE,normalize="quantile")
colnames(design)=levels(celltype)
design
fit <- lmFit(v,design)
cm <- makeContrasts(Con_PsvsCB=Con_Ps-Con_CB, APC_PsvsCB=APC_Ps-APC_CB,
Diff=(APC_Ps-APC_CB)-(Con_Ps-Con_CB), levels=design)
fit2 <- contrasts.fit(fit, cm)
fit2 <- eBayes(fit2)
topTable(fit2, coef="Diff",n=50,sort.by="p")
topgenes_data=v1$E[rownames(v1$E) %in% rownames(topgenes),]
topgenes_data=topgenes_data[match(rownames(topgenes),rownames(topgenes_data)),]
colnames(topgenes_data)=targets$Phenotype[match(colnames(topgenes_data),targets$bam)]
colnames(topgenes_data)= sapply(strsplit(colnames(topgenes_data),split=" "),function(x) x[1])
colnames(topgenes_data)=paste(colnames(topgenes_data),targets$Replicate)
colnames(topgenes_data)
topgenes_data
topgenes_data=v$E[rownames(v$E) %in% rownames(topgenes),]
topgenes_data
topgenes_data=topgenes_data[match(rownames(topgenes),rownames(topgenes_data)),]
colnames(topgenes_data)=targets$Phenotype[match(colnames(topgenes_data),targets$bam)]
colnames(topgenes_data)
colnames(topgenes_data)
rownames(v$E)
colnames(v$E)
colnames(topgenes_data)=colnames(v$E)
topgenes_data=topgenes_data[match(rownames(topgenes),rownames(topgenes_data)),]
colnames(topgenes_data)=targets$Phenotype[match(colnames(topgenes_data),targets$bam)]
colnames(topgenes_data)
colnames(v$E)
topgenes_data=v$E[rownames(v$E) %in% rownames(topgenes),]
colnames(topgenes_data)=colnames(v$E)
colnames(topgenes_data)
rownames(topgenes)
colnames(topgenes_data)
targets$bam
v
x
colnames(x)
targets$bam=colnames(x)
targets
topgenes_data=v$E[rownames(v$E) %in% rownames(topgenes),]
colnames(topgenes_data)=colnames(v$E)
topgenes_data=topgenes_data[match(rownames(topgenes),rownames(topgenes_data)),]
colnames(topgenes_data)=targets$Phenotype[match(colnames(topgenes_data),targets$bam)]
colnames(topgenes_data)
colnames(topgenes_data)=paste(colnames(topgenes_data),targets$Replicate)
colnames(topgenes_data)
colnames(topgenes_data)=paste(colnames(topgenes_data),targets$Replicate,sep=".'")
colnames(topgenes_data)=paste(colnames(topgenes_data),targets$Replicate,sep=".")
d3heatmap(topgenes_data, scale = "row", dendrogram = "none", main = "title",
color = "YlOrRd",cexRow=1,main="topgenes")
library(d3heatmap)
d3heatmap(topgenes_data, scale = "row", dendrogram = "none", main = "title",
color = "YlOrRd",cexRow=1,main="topgenes")
colnames(topgenes_data)=colnames(v$E)
topgenes_data=topgenes_data[match(rownames(topgenes),rownames(topgenes_data)),]
colnames(topgenes_data)=targets$Phenotype[match(colnames(topgenes_data),targets$bam)]
colnames(topgenes_data)=paste(colnames(topgenes_data),targets$Replicate,sep=".")
d3heatmap(topgenes_data, scale = "row", dendrogram = "none", main = "title",
color = "YlOrRd",cexRow=1,main="topgenes")
residuals.MArrayLM(fit2,v)
colnames(design)
fit <- lmFit(v,design)
cm <- makeContrasts(Con_PsvsCB=Con_Ps-Con_CB, APC_PsvsCB=APC_Ps-APC_CB,
Diff=(APC_Ps-APC_CB)-(Con_Ps-Con_CB), levels=design)
dim(Gt1b)
save.image()
